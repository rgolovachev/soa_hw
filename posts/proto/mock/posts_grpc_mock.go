// Code generated by MockGen. DO NOT EDIT.
// Source: proto/posts_grpc.pb.go

// Package mock_postspb is a generated GoMock package.
package mock_postspb

import (
	context "context"
	proto "posts/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPostsServiceClient is a mock of PostsServiceClient interface.
type MockPostsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostsServiceClientMockRecorder
}

// MockPostsServiceClientMockRecorder is the mock recorder for MockPostsServiceClient.
type MockPostsServiceClientMockRecorder struct {
	mock *MockPostsServiceClient
}

// NewMockPostsServiceClient creates a new mock instance.
func NewMockPostsServiceClient(ctrl *gomock.Controller) *MockPostsServiceClient {
	mock := &MockPostsServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsServiceClient) EXPECT() *MockPostsServiceClientMockRecorder {
	return m.recorder
}

// CheckIfPostExists mocks base method.
func (m *MockPostsServiceClient) CheckIfPostExists(ctx context.Context, in *proto.CheckIfPostExistsReq, opts ...grpc.CallOption) (*proto.CheckIfPostExistsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckIfPostExists", varargs...)
	ret0, _ := ret[0].(*proto.CheckIfPostExistsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPostExists indicates an expected call of CheckIfPostExists.
func (mr *MockPostsServiceClientMockRecorder) CheckIfPostExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPostExists", reflect.TypeOf((*MockPostsServiceClient)(nil).CheckIfPostExists), varargs...)
}

// CreatePost mocks base method.
func (m *MockPostsServiceClient) CreatePost(ctx context.Context, in *proto.CreatePostReq, opts ...grpc.CallOption) (*proto.CreatePostResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePost", varargs...)
	ret0, _ := ret[0].(*proto.CreatePostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsServiceClientMockRecorder) CreatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostsServiceClient)(nil).CreatePost), varargs...)
}

// DeletePost mocks base method.
func (m *MockPostsServiceClient) DeletePost(ctx context.Context, in *proto.DeletePostReq, opts ...grpc.CallOption) (*proto.DeletePostResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePost", varargs...)
	ret0, _ := ret[0].(*proto.DeletePostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostsServiceClientMockRecorder) DeletePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostsServiceClient)(nil).DeletePost), varargs...)
}

// GetAllPosts mocks base method.
func (m *MockPostsServiceClient) GetAllPosts(ctx context.Context, in *proto.GetAllPostsReq, opts ...grpc.CallOption) (*proto.GetAllPostsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllPosts", varargs...)
	ret0, _ := ret[0].(*proto.GetAllPostsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostsServiceClientMockRecorder) GetAllPosts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostsServiceClient)(nil).GetAllPosts), varargs...)
}

// GetPost mocks base method.
func (m *MockPostsServiceClient) GetPost(ctx context.Context, in *proto.GetPostReq, opts ...grpc.CallOption) (*proto.GetPostResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPost", varargs...)
	ret0, _ := ret[0].(*proto.GetPostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostsServiceClientMockRecorder) GetPost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostsServiceClient)(nil).GetPost), varargs...)
}

// UpdatePost mocks base method.
func (m *MockPostsServiceClient) UpdatePost(ctx context.Context, in *proto.UpdatePostReq, opts ...grpc.CallOption) (*proto.UpdatePostResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePost", varargs...)
	ret0, _ := ret[0].(*proto.UpdatePostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostsServiceClientMockRecorder) UpdatePost(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostsServiceClient)(nil).UpdatePost), varargs...)
}

// MockPostsServiceServer is a mock of PostsServiceServer interface.
type MockPostsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPostsServiceServerMockRecorder
}

// MockPostsServiceServerMockRecorder is the mock recorder for MockPostsServiceServer.
type MockPostsServiceServerMockRecorder struct {
	mock *MockPostsServiceServer
}

// NewMockPostsServiceServer creates a new mock instance.
func NewMockPostsServiceServer(ctrl *gomock.Controller) *MockPostsServiceServer {
	mock := &MockPostsServiceServer{ctrl: ctrl}
	mock.recorder = &MockPostsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsServiceServer) EXPECT() *MockPostsServiceServerMockRecorder {
	return m.recorder
}

// CheckIfPostExists mocks base method.
func (m *MockPostsServiceServer) CheckIfPostExists(arg0 context.Context, arg1 *proto.CheckIfPostExistsReq) (*proto.CheckIfPostExistsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfPostExists", arg0, arg1)
	ret0, _ := ret[0].(*proto.CheckIfPostExistsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfPostExists indicates an expected call of CheckIfPostExists.
func (mr *MockPostsServiceServerMockRecorder) CheckIfPostExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfPostExists", reflect.TypeOf((*MockPostsServiceServer)(nil).CheckIfPostExists), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockPostsServiceServer) CreatePost(arg0 context.Context, arg1 *proto.CreatePostReq) (*proto.CreatePostResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreatePostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsServiceServerMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostsServiceServer)(nil).CreatePost), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockPostsServiceServer) DeletePost(arg0 context.Context, arg1 *proto.DeletePostReq) (*proto.DeletePostResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeletePostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostsServiceServerMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostsServiceServer)(nil).DeletePost), arg0, arg1)
}

// GetAllPosts mocks base method.
func (m *MockPostsServiceServer) GetAllPosts(arg0 context.Context, arg1 *proto.GetAllPostsReq) (*proto.GetAllPostsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetAllPostsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostsServiceServerMockRecorder) GetAllPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostsServiceServer)(nil).GetAllPosts), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockPostsServiceServer) GetPost(arg0 context.Context, arg1 *proto.GetPostReq) (*proto.GetPostResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetPostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockPostsServiceServerMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockPostsServiceServer)(nil).GetPost), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockPostsServiceServer) UpdatePost(arg0 context.Context, arg1 *proto.UpdatePostReq) (*proto.UpdatePostResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdatePostResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostsServiceServerMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostsServiceServer)(nil).UpdatePost), arg0, arg1)
}

// mustEmbedUnimplementedPostsServiceServer mocks base method.
func (m *MockPostsServiceServer) mustEmbedUnimplementedPostsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostsServiceServer")
}

// mustEmbedUnimplementedPostsServiceServer indicates an expected call of mustEmbedUnimplementedPostsServiceServer.
func (mr *MockPostsServiceServerMockRecorder) mustEmbedUnimplementedPostsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostsServiceServer", reflect.TypeOf((*MockPostsServiceServer)(nil).mustEmbedUnimplementedPostsServiceServer))
}

// MockUnsafePostsServiceServer is a mock of UnsafePostsServiceServer interface.
type MockUnsafePostsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePostsServiceServerMockRecorder
}

// MockUnsafePostsServiceServerMockRecorder is the mock recorder for MockUnsafePostsServiceServer.
type MockUnsafePostsServiceServerMockRecorder struct {
	mock *MockUnsafePostsServiceServer
}

// NewMockUnsafePostsServiceServer creates a new mock instance.
func NewMockUnsafePostsServiceServer(ctrl *gomock.Controller) *MockUnsafePostsServiceServer {
	mock := &MockUnsafePostsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePostsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePostsServiceServer) EXPECT() *MockUnsafePostsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPostsServiceServer mocks base method.
func (m *MockUnsafePostsServiceServer) mustEmbedUnimplementedPostsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostsServiceServer")
}

// mustEmbedUnimplementedPostsServiceServer indicates an expected call of mustEmbedUnimplementedPostsServiceServer.
func (mr *MockUnsafePostsServiceServerMockRecorder) mustEmbedUnimplementedPostsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostsServiceServer", reflect.TypeOf((*MockUnsafePostsServiceServer)(nil).mustEmbedUnimplementedPostsServiceServer))
}
